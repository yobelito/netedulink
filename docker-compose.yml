services:
  squid:
    build: .  # Usa la imagen personalizada con SSL Bump
    container_name: squid-cache
    restart: always
    ports:
      - "3128:3128"
      - "3129:3129"
    volumes:
      - ./squid.conf:/usr/local/squid/etc/squid.conf
      - ./ssl_cert:/etc/squid/ssl_cert
      - squid_cache:/var/spool/squid
      - squid_logs:/var/log/squid  # Comparte los logs con Squid Analyzer
    environment:
      - TZ=America/Lima

  squid-analyzer:
    image: coun/squidanalyzer
    container_name: squid-analyzer
    restart: always
    ports:
      - "8090:8090"  # Puerto web de Squid Analyzer
    environment:
      - LOGIN=admin
      - PASS=admin
      - TZ=America/Lima
      - PATHLOGS=/var/log/squid/access.log
    volumes:
      - squidanalyzer-conf:/etc/squidanalyzer
      - squid_logs:/var/log/squid  # Logs de Squid
      - squid-full-logs:/var/www/html/squidreport  # Reportes generados

  squid_precacher:
    build: ./squid_precacher
    container_name: squid-precacher
    restart: always
    ports:
      - "5002:5000"  # Puerto del backend Flask
    volumes:
      - ./squid_precacher/config.conf:/app/config.conf
    environment:
      - CONFIG_FILE=/app/config.conf
    depends_on:
      - squid  # Espera a que Squid Proxy esté listo antes de ejecutarse

  frontend:
    build: ./frontend
    container_name: frontend-nginx
    restart: always
    ports:
      - "8080:80"  # Servir frontend en el puerto 8080
    depends_on:
      - squid_precacher  # Se asegura que el backend esté listo antes
    volumes:
      - ./frontend:/usr/share/nginx/html  # Servir archivos HTML/JS

volumes:
  squid_cache:
    driver: local
  squid_logs:
    driver: local  # Volumen compartido entre Squid y Squid Analyzer
  squidanalyzer-conf:
    driver: local
  squid-full-logs:
    driver: local
